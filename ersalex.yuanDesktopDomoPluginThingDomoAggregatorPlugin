[1mdiff --git a/DomoAggregatorPlugin/DataReader.cs b/DomoAggregatorPlugin/DataReader.cs[m
[1mindex 6b2be61..37e5f74 100755[m
[1m--- a/DomoAggregatorPlugin/DataReader.cs[m
[1m+++ b/DomoAggregatorPlugin/DataReader.cs[m
[36m@@ -1,361 +1,326 @@[m
[31m-ï»¿using DomoAggregatorPlugin.Controls;[m
[31m-using PluginUtil;[m
[31m-using System;[m
[31m-using System.AddIn;[m
[31m-using System.Collections.Generic;[m
[31m-using System.Data;[m
[31m-using System.Data.Odbc;[m
[31m-using System.Linq;[m
[31m-using System.Text;[m
[31m-using System.Text.RegularExpressions;[m
[31m-using System.Windows.Navigation;[m
[31m-using WorkbenchPlugin.Views.Plugin.v3;[m
[31m-using WorkbenchPlugin.Views.Plugin.v3.DataProvider;[m
[31m-using WorkbenchPlugin.Views.Plugin.v3.DataReader;[m
[31m-[m
[31m-namespace DomoAggregatorPlugin[m
[31m-{[m
[31m-    /// <summary>[m
[31m-    /// Provides a way to read a specific data source in a way Domo Workbench can understand.[m
[31m-    /// </summary>[m
[31m-    [AddIn("DomoAggregatorPlugin Reader", Publisher = "", Description = "DomoAggregatorPlugin Workbench Plugin", Version = "1.0.0.0")][m
[31m-    public class DataReader : IWorkbenchDataReaderPlugin[m
[31m-    {[m
[31m-        private IWorkbenchHost _callbackHost;[m
[31m-        private bool _cancelRequested = false;[m
[31m-        private int _currentRowIndex = -1;[m
[31m-        private IWorkbenchDataProviderPlugin _dataProvider;[m
[31m-        private MyDataReaderProperties _readerProperties;[m
[31m-        private ConnectionMetadata _currentConnection;[m
[31m-        private List<ConnectionMetadata> _connections = new List<ConnectionMetadata>();[m
[31m-[m
[31m-        private const string DatabaseSourceColumnName = "subscriber_database";[m
[31m-        private const string LastValueParameter = "lastvalue";[m
[31m-[m
[31m-        private int _count;[m
[31m-        private bool _pleaseWork = false;[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Any execution characteristics that are needed by this DataReader[m
[31m-        /// </summary>[m
[31m-        public IWorkbenchDataReaderPluginExecutionCharacteristics ExecutionCharacteristics[m
[31m-        {[m
[31m-            get { return null; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// The user-friendly name for this DataReader implementation.[m
[31m-        /// </summary>[m
[31m-        public string Name[m
[31m-        {[m
[31m-            get { return "DomoAggregatorPlugin"; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// An image to be displayed when this DataReader is selected.[m
[31m-        /// </summary>[m
[31m-        public byte[] NavigationImage[m
[31m-        {[m
[31m-            get { return null; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// The recommended DataSet type to upload as[m
[31m-        /// </summary>[m
[31m-        public string RecommendedDataSetType[m
[31m-        {[m
[31m-            get { return DataSetTypes.Odbc; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Whether or not this DataReader requires a 32bit process.[m
[31m-        /// </summary>[m
[31m-        public bool Requires32Bit[m
[31m-        {[m
[31m-            get { return false; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Whether or not this DataReader requires an interactive session.[m
[31m-        /// </summary>[m
[31m-        public bool RequiresInteractiveSession[m
[31m-        {[m
[31m-            get { return false; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Allows the DataReader to define the type of supported input.[m
[31m-        /// This should be used with <see cref="SourceType"/>[m
[31m-        /// </summary>[m
[31m-        public string SupportedSourceTypes[m
[31m-        {[m
[31m-            get { return SourceType.DbConnection; }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Called to apply changes to a job. These changes are generated by a call to IWorkbenchHost.SetJobChange().[m
[31m-        /// </summary>[m
[31m-        /// <param name="jobChanges"></param>[m
[31m-        public void ApplyJobChanges(IList<IWorkbenchJobChange> jobChanges)[m
[31m-        {[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Requests a cancel of a running operation.[m
[31m-        /// </summary>[m
[31m-        public void Cancel()[m
[31m-        {[m
[31m-            _cancelRequested = true;[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Cleans up resources[m
[31m-        /// </summary>[m
[31m-        public void Dispose()[m
[31m-        {[m
[31m-            foreach (var connectionMetadata in _connections)[m
[31m-            {[m
[31m-                connectionMetadata.Reader?.Close();[m
[31m-                connectionMetadata.Reader?.Dispose();[m
[31m-                connectionMetadata.Connection?.Close();[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// Gets the editor for this DataReader.[m
[31m-        /// </summary>[m
[31m-        /// <returns>Returns the editor that allows configuration for this DataReader</returns>[m
[31m-        public IWorkbenchDataReaderPluginEditor GetDataReaderEditor()[m
[31m-        {[m
[31m-            LogEvent(LogMessageType.Progress, "GetDataReader called");[m
[31m-            return new DataReaderControl(new DataReaderControlViewModel(_callbackHost, _dataProvider));[m
[31m-        }[m
[31m-        /// <summary>[m
[31m-        /// Gets the column headers for each row.[m
[31m-        /// </summary>[m
[31m-        /// <returns>A list of column header strings</returns>[m
[31m-        public IList<string> GetHeaders()[m
[31m-        {[m
[31m-[m
[31m-            var headers = new List<string>();[m
[31m-            // send back column headers to demonstrate this plugin[m
[31m-            for (var i = 0; i < _connections.First().Reader.FieldCount; i++)[m
[31m-            {[m
[31m-                headers.Add(_connections.First().Reader.GetName(i));[m
[31m-            }[m
[31m-            headers.Add(DatabaseSourceColumnName);[m
[31m-    [m
[31m-            return headers;[m
[31m-        }[m
[31m-[m
[31m-        /// <summary>[m
[31m-        /// While the <see cref="DomoAggregatorPlugin.DataReader.MoveNext"/> returns true, this method will be invoked to get the[m
[31m-        /// row data.  The data needs to be in the same order that the <see cref="DomoAggregatorPlugin.DataReader.GetHeaders"/> returns.[m
[31m-        /// </summary>[m
[31m-        /// <returns>A list of row data.</returns>[m
[31m-        public List<object> GetRowData()[m
[31m-        {[m
[31m-            LogEvent(LogMessageType.Progress, _count.ToString());[m
[31m-            if (_pleaseWork)[m
[31m-            {[m
[31m-                LogEvent(LogMessageType.Progress, "In GetRowData() about to call MoveNext()");[m
[31m-                MoveNext();[m
[31m-                _pleaseWork = false;[m
[31m-            }[m
[31m-[m
[31m-            LogEvent(LogMessageType.Progress, "GetRowData Start");[m
[31m-            List<object> rowData = new List<object>();[m
[31m-[m
[31m-            // send the row data back in the same order as the headers[m
[31m-            foreach (var header in GetHeaders())[m
[31m-            {[m
[31m-                //Add data for additional data source column allowing us to determine where the query results originated from[m
[31m-[m
[31m-                if (DatabaseSourceColumnName.Equals(header))[m
[31m-                {[m
[31m-                    LogEvent(LogMessageType.Progress, "Adding additional data source co